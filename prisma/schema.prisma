// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Status {
  PLANNED
  BRIEFED
  IN_PROGRESS
  COMPLETE
}

enum ChannelType {
  EMAIL
  TEXT
  OTHER
}

model Item {
  id          Int        @id @default(autoincrement())
  calendarId  Int        // Add this field
  channelId   String
  title       String
  status      Status
  color       String
  channelType ChannelType
  leadForecast Int
  leadActual  Int
  date        DateTime
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  reports     Report[]
  calendar    Calendar   @relation(fields: [calendarId], references: [id]) // Add this relation
}

model Calendar {
  id       Int      @id @default(autoincrement())
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  items    Item[]   // Remove references: [id]
  created  DateTime @default(now())
  updated  DateTime @updatedAt
  url      String

  @@unique([userId, url])
}

model Report {
  id        Int      @id @default(autoincrement())
  itemId    Int
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  item      Item     @relation(fields: [itemId], references: [id])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  calendars     Calendar[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
